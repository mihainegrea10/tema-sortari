#include <iostream>
#include <bits/stdc++.h>
#include <chrono>
#include <vector>
using namespace std;
using namespace std::chrono;
int n;
long long maxim;
vector <long long> v;
void generate_array(vector<long long>&v,long long maxim)
{
    mt19937_64 gen(time(NULL));
    uniform_int_distribution<long long>random(0,maxim);
    for(auto i=v.begin();i!=v.end();i++)
    {
        *i=random(gen);
    }

}
void verificare(vector<long long> arr)
{
    int ok=1;
    for (int i = 0; i < arr.size()-1; i++)
        {
            if(arr[i]>arr[i+1])
                ok=0;
        }
    cout << ok;
}
void print(vector<long long> arr)
{
    for (int i = 0; i < arr.size(); i++)
        cout << arr[i] << " ";
    cout << endl;
}
void MergeSortedIntervals(vector<long long>& v, int s, int m, int e) {

    
	vector<int> temp;

	int i, j;
	i = s;
	j = m + 1;

	while (i <= m && j <= e) {

		if (v[i] <= v[j]) {
			temp.push_back(v[i]);
			++i;
		}
		else {
			temp.push_back(v[j]);
			++j;
		}

	}

	while (i <= m) {
		temp.push_back(v[i]);
		++i;
	}

	while (j <= e) {
		temp.push_back(v[j]);
		++j;
	}

	for (int i = s; i <= e; ++i)
		v[i] = temp[i - s];

}


void MergeSort(vector<long long>& v, int s, int e) {
	if (s < e) {
		int m = (s + e) / 2;
		MergeSort(v, s, m);
		MergeSort(v, m + 1, e);
		MergeSortedIntervals(v, s, m, e);
	}
}



int main()
{
    cin>>n;
    v=vector<long long>(n);
    maxim=1000000;
    generate_array(v,maxim);






    auto start=high_resolution_clock::now();
    MergeSort(v, 0, n - 1);
    auto stop=high_resolution_clock::now();
    auto duration=duration_cast<microseconds>(stop-start);
    cout<<duration.count()<<endl;
    verificare(v);

    return 0;
}