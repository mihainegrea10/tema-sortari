#include <iostream>
#include <bits/stdc++.h>
#include <chrono>
#include <vector>
using namespace std;
using namespace std::chrono;
int n;
long long maxim;
vector <long long> v;
void generate_array(vector<long long>&v,long long maxim)
{
    mt19937_64 gen(time(NULL));
    uniform_int_distribution<long long>random(0,maxim);
    for(auto i=v.begin();i!=v.end();i++)
    {
        *i=random(gen);
    }

}

void print(vector<long long> arr)
{
    for (int i = 0; i < arr.size(); i++)
        cout << arr[i] << " ";
    cout << endl;
}

void verificare(vector<long long> arr)
{
    int ok=1;
    for (int i = 0; i < arr.size()-1; i++)
        {
            if(arr[i]>arr[i+1])
                ok=0;
        }
    cout << ok;
}
void max_heapify(vector<long long>& arr, int i, int size_)
{
    int largest, l = (2*i) + 1, r = l + 1;

    if(l < size_ && arr[l] > arr[i])
        largest = l;
    else
        largest = i;

    if(r < size_ && arr[r] > arr[largest])
        largest = r;

    if(largest != i)
    {
        std::swap(arr[i], arr[largest]);
        max_heapify(arr, largest, size_);
    }
}

void build_max_heap(vector<long long>& arr)
{
    for(int i = (arr.size() / 2); i >= 0; i--)
    max_heapify(arr, i, arr.size());
}

void heap_sort(vector<long long>& arr)
{
   build_max_heap(arr);
   int sz = arr.size();
   for(int i = arr.size() - 1; i > 0; i--)
   {
        std::swap(arr[0], arr[i]);
        sz--;
        max_heapify(arr, 0, sz);
    }
}

int main()
{
    cin>>n;
    v=vector<long long>(n);
    maxim=1000000;
    generate_array(v,maxim);










    auto start=high_resolution_clock::now();
    heap_sort(v);
    auto stop=high_resolution_clock::now();
    auto duration=duration_cast<microseconds>(stop-start);

    cout<<duration.count()<<endl;
    verificare(v);





    return 0;
}
